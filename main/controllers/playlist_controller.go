package controllers

import (
	"encoding/json"
	"log"
	"musicservice/main/database"
	"musicservice/main/models"
	"net/http"
)

func UpdatePlaylist(w http.ResponseWriter, r *http.Request) {
	playlistID := r.URL.Query().Get("id") // ‚úÖ –ü–æ–ª—É—á–∞–µ–º id –∏–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞

	var requestData struct {
		Name string `json:"name"`
	}

	if err := json.NewDecoder(r.Body).Decode(&requestData); err != nil {
		http.Error(w, "Invalid request data", http.StatusBadRequest)
		return
	}

	_, err := database.DB.Exec("UPDATE playlists SET name = $1 WHERE id = $2", requestData.Name, playlistID)
	if err != nil {
		http.Error(w, "Failed to update playlist: "+err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{"message": "Playlist updated successfully"})
}

func DeletePlaylist(w http.ResponseWriter, r *http.Request) {
	playlistID := r.URL.Query().Get("id") // ‚úÖ –ü–æ–ª—É—á–∞–µ–º id –∏–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞

	_, err := database.DB.Exec("DELETE FROM playlists WHERE id = $1", playlistID)
	if err != nil {
		http.Error(w, "Failed to delete playlist: "+err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{"message": "Playlist deleted successfully"})
}

func AddSongToPlaylist(w http.ResponseWriter, r *http.Request) {
	var data struct {
		PlaylistID int    `json:"playlist_id"`
		SongID     string `json:"song_id"` // ID —Ç—Ä–µ–∫–∞ –∏–∑ Spotify
		Title      string `json:"title"`   // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
		Artist     string `json:"artist"`  // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
	}

	if err := json.NewDecoder(r.Body).Decode(&data); err != nil {
		http.Error(w, "Invalid request data", http.StatusBadRequest)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ songs
	var localSongID int
	err := database.DB.Get(&localSongID, "SELECT id FROM songs WHERE spotify_id = $1", data.SongID)

	if err != nil {
		// –ï—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É songs
		_, err = database.DB.Exec("INSERT INTO songs (spotify_id, title, artist) VALUES ($1, $2, $3)", data.SongID, data.Title, data.Artist)
		if err != nil {
			http.Error(w, "Failed to add song to database: "+err.Error(), http.StatusInternalServerError)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ID —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
		err = database.DB.Get(&localSongID, "SELECT id FROM songs WHERE spotify_id = $1", data.SongID)
		if err != nil {
			http.Error(w, "Failed to retrieve local song ID: "+err.Error(), http.StatusInternalServerError)
			return
		}
	}

	// –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç
	_, err = database.DB.Exec("INSERT INTO playlist_songs (playlist_id, song_id) VALUES ($1, $2)", data.PlaylistID, localSongID)
	if err != nil {
		http.Error(w, "Failed to add song to playlist: "+err.Error(), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(map[string]string{"message": "Song added successfully"})
}

func GetPlaylistSongs(w http.ResponseWriter, r *http.Request) {
	playlistID := r.URL.Query().Get("playlist_id")
	if playlistID == "" {
		http.Error(w, "Playlist ID is required", http.StatusBadRequest)
		return
	}

	var songs []models.Song
	err := database.DB.Select(&songs, "SELECT songs.* FROM playlist_songs JOIN songs ON playlist_songs.song_id = songs.id WHERE playlist_songs.playlist_id = $1", playlistID)
	if err != nil {
		http.Error(w, "Failed to fetch songs: "+err.Error(), http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(songs)
}

func GetRecentlyPlayed(w http.ResponseWriter, r *http.Request) {
	userID := r.URL.Query().Get("user_id")
	if userID == "" {
		http.Error(w, "User ID is required", http.StatusBadRequest)
		return
	}

	var recentlyPlayed []models.Song
	err := database.DB.Select(&recentlyPlayed, "SELECT songs.* FROM recently_played JOIN songs ON recently_played.song_id = songs.id WHERE recently_played.user_id = $1", userID)
	if err != nil {
		http.Error(w, "Failed to fetch recently played songs: "+err.Error(), http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(recentlyPlayed)
}

func GetKazakhSongs(w http.ResponseWriter, r *http.Request) {
	songs := []map[string]string{
		{"id": "1", "title": "–ê—Ä–º–∞–Ω", "artist": "ILHAN", "image": "/images/arman.jpg"},
		{"id": "3", "title": "–¢—É“ì–∞–Ω –∂–µ—Ä", "artist": "–ú—É–∑–ê—Ä—Ç", "image": "/images/muzart.jpg"},
	}
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(songs)
}

func CreatePlaylist(w http.ResponseWriter, r *http.Request) {
	var requestData struct {
		Name   string `json:"name"`
		UserID int    `json:"user_id"`
	}

	// ‚úÖ –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON-–∑–∞–ø—Ä–æ—Å
	if err := json.NewDecoder(r.Body).Decode(&requestData); err != nil {
		http.Error(w, "Invalid request data", http.StatusBadRequest)
		return
	}

	if database.DB == nil {
		http.Error(w, "‚ùå Database is not initialized!", http.StatusInternalServerError)
		return
	}

	// ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	log.Println("üîß Creating playlist with data:", requestData)

	var playlistID int
	err := database.DB.QueryRow("INSERT INTO playlists (name, user_id) VALUES ($1, $2) RETURNING id", requestData.Name, requestData.UserID).Scan(&playlistID)
	if err != nil {
		http.Error(w, "Failed to create playlist: "+err.Error(), http.StatusInternalServerError)
		return
	}

	response := map[string]interface{}{
		"id":      playlistID,
		"name":    requestData.Name,
		"user_id": requestData.UserID,
	}

	log.Println("‚úÖ JSON Response:", response) // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º JSON –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response) // ‚úÖ –¢–µ–ø–µ—Ä—å JSON-–æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
}

func GetPlaylists(w http.ResponseWriter, r *http.Request) {
	userID := r.URL.Query().Get("user_id")
	if userID == "" {
		http.Error(w, "User ID is required", http.StatusBadRequest)
		return
	}

	var playlists []models.Playlist
	err := database.DB.Select(&playlists, "SELECT id, name, user_id FROM playlists WHERE user_id = $1", userID)
	if err != nil {
		log.Println("‚ùå Failed to fetch playlists:", err) // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞
		http.Error(w, "Failed to fetch playlists: "+err.Error(), http.StatusInternalServerError)
		return
	}

	log.Println("‚úÖ JSON Response (Playlists):", playlists) // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(playlists)
}
